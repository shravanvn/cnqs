import argparse
import matplotlib.pyplot as plt
import numpy as np
import os
import yaml


def compute_autocorr(data, max_lag):
    m, n = data.shape

    mu = data.mean(axis=0)[None, :]

    autocorr = np.zeros((max_lag + 1, n), dtype=np.double)
    for k in range(max_lag + 1):
        autocorr[k, :] = \
            ((data[k:, :] - mu) * (data[:m - k, :] - mu)).mean(axis=0) / \
            ((data - mu)**2).mean(axis=0)

    return autocorr


def main(data_dir, sgd_step_list, burn_in, max_lag):
    os.makedirs('{}/plots/'.format(data_dir), exist_ok=True)

    for sgd_step in sgd_step_list:
        samples = np.loadtxt('{}/samples/step_{}.txt'.format(data_dir,
                                                             sgd_step))
        m, n = samples.shape

        # trace plot
        for j in range(n):
            fig, ax = plt.subplots()
            ax.plot(np.arange(m), samples[:, j])
            ax.set_xlabel('MCMC Step')
            ax.set_ylabel('State[{}]'.format(j))
            fig.savefig('{}/plots/step_{}_trace_{}.pdf'.format(data_dir,
                                                               sgd_step, j))
            plt.close(fig)

        # autocorrelation
        autocorr = compute_autocorr(samples[burn_in:, :], max_lag)

        fig, ax = plt.subplots()
        ax.plot(np.arange(max_lag + 1), autocorr)
        ax.set_xlabel('Lag')
        ax.set_ylabel('Autocorrelation')
        fig.savefig('{}/plots/step_{}_autocorr.pdf'.format(data_dir, sgd_step))
        plt.close(fig)


if __name__ == '__main__':
    # parse arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--config_file',
        type=str,
        help='path to config file generated by vmcsolver'
    )
    parser.add_argument(
        '--max_lag',
        type=int,
        help='maximum lag used in autocorrelation computation'
    )
    parser.add_argument(
        '--sgd_step',
        type=int,
        default=None,
        help='samples from SGD step to analyze'
    )

    args = parser.parse_args()

    # read config
    with open(args.config_file, 'r') as file:
        config = yaml.safe_load(file)

    # setup
    data_dir = config['output']['prefix']

    if args.sgd_step is None:
        sgd_step_list = np.arange(
            start=0, stop=config['gradient_descent']['num_steps'] + 1,
            step=config['output']['frequency'])
    else:
        sgd_step_list = np.array([args.sgd_step])

    burn_in = config['metropolis']['warm_steps']

    # call main routine
    main(data_dir, sgd_step_list, burn_in, args.max_lag)
